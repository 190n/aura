GENERAL
-------

PKGBUILD ANALYSIS
-----------------
Develop a system for verifying PKBUILDs!
Does a PKGBUILD: Have code outside of build() or package()?
       		 Perform certain forbidden actions?
		 Download sources from fishy places?
Realistically, this should be another program entirely.

DEPENDENCY ANALYSIS
-------------------
Outputting a sort of "dependency tree/graph" that shows how much certain
packages are depended on, and what packages use "fringe" dependencies.
The goal would be to reduce the amount of programs that use these fringe
dependencies, or make it so that they use more mainstream libraries, etc.

WELCOME MESSAGE
---------------
When aura is used for the first time, print a welcome message explaining it
and its philosophy (no default prompting to view PKGBUILDs, etc).
After that, write a file called `.aura_used` to a predictable location.
When running aura, if that file does not exist, we know aura hasn't been
used yet.
If aura is run for the first time and a language flag is included, print
the welcome message in that language.

OPTIONS TO IMPLEMENT
--------------------
-As -> `--search` Search for an AUR package
-Ai -> `--info` Gives specific info on an AUR package.
-Ci -> `--info` Gives some stats about the package cache.
-   -> `--prompt` Prompt the user if they want to view PKGBUILDs.

FLAGS UNUSED BY PACMAN
----------------------
a j x z
(Of these [a x z] has been taken by Aura)

OUT OF DATE
-----------
Once dependencies are determined, notify the user if any are O.o.D.

RUN BY ROOT USER
----------------
When run by the root user and not by sudo, check this and run makepkg
with --runasroot. This is not a safe procedure, but the user must be
responsible for their actions.
