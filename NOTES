GENERAL
-------
Ignored packages need to be ignored at an earlier stage!!

PKGBUILD ANALYSIS
-----------------
Develop a system for verifying PKBUILDs!
Does a PKGBUILD: Have code outside of build() or package()?
       		 Perform certain forbidden actions?
		 Download sources from fishy places?

DEPENDENCY ANALYSIS
-------------------
Outputting a sort of "dependency tree/graph" that shows how much certain
packages are depended on, and what packages use "fringe" dependencies.
The goal would be to reduce the amount of programs that use these fringe
dependencies, or make it so that they use more mainstream libraries, etc.

OPTIONS TO IMPLEMENT
--------------------
-As -> `--search` Search for an AUR package
-Au -> `--sysupgrade` Upgrades all installed packages via a database.
-Aw -> `--downloadonly` Downloads packages but doesn't do anything to it.
-Av -> `--verbose` Doesn't suppress makepkg output.
-C  -> Allows packages to be downgraded from a list generated from the cache.

OUT OF DATE
-----------
Once dependencies are determined, notify the user if any are O.o.D.

AURA ADVICE
-----------
Every once and a while show a tip. For example:
"Aura tip: Did you know you can use `-Qdt` to view all orphaned packages you
have installed?"
"Aura tip: `Ayu` is great for upgrading packages... it's also a tasty
Japanese fish."
"Aura tip: Did you know you can use Aura in different languages?
Run Aura with the flag `--languages` to find out which ones."

RUN BY ROOT USER
----------------
When run by the root user and not by sudo, check this and run makepkg
with --runasroot. This is not a safe procedure, but the user must be
responsible for their actions.

PACKER
------
Where does packer get .install files?
Packer syncs packages by downloading the PKGBUILD again and comparing
  version numbers.